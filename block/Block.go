// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package block

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BlockT struct {
	Id uint32 `json:"id"`
	Names []string `json:"names"`
}

func (t *BlockT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	namesOffset := flatbuffers.UOffsetT(0)
	if t.Names != nil {
		namesLength := len(t.Names)
		namesOffsets := make([]flatbuffers.UOffsetT, namesLength)
		for j := 0; j < namesLength; j++ {
			namesOffsets[j] = builder.CreateString(t.Names[j])
		}
		BlockStartNamesVector(builder, namesLength)
		for j := namesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(namesOffsets[j])
		}
		namesOffset = builder.EndVector(namesLength)
	}
	BlockStart(builder)
	BlockAddId(builder, t.Id)
	BlockAddNames(builder, namesOffset)
	return BlockEnd(builder)
}

func (rcv *Block) UnPackTo(t *BlockT) {
	t.Id = rcv.Id()
	namesLength := rcv.NamesLength()
	t.Names = make([]string, namesLength)
	for j := 0; j < namesLength; j++ {
		t.Names[j] = string(rcv.Names(j))
	}
}

func (rcv *Block) UnPack() *BlockT {
	if rcv == nil { return nil }
	t := &BlockT{}
	rcv.UnPackTo(t)
	return t
}

type Block struct {
	_tab flatbuffers.Table
}

func GetRootAsBlock(buf []byte, offset flatbuffers.UOffsetT) *Block {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Block{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBlock(buf []byte, offset flatbuffers.UOffsetT) *Block {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Block{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Block) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Block) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Block) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Block) Names(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Block) NamesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func BlockStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BlockAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func BlockAddNames(builder *flatbuffers.Builder, names flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(names), 0)
}
func BlockStartNamesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BlockEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
